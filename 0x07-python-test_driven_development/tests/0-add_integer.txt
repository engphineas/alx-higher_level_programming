===========================
How to Use 0-add_integer.py
===========================

The module that defines function ``add_integer(a, b=98)``, an integer addition.

Uses
=====

``add_integer(...)``` returns two arguments addition.
the value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(4, 3)
    7

::

    >>> add_integer(2, -3)
    -1

The function also computes with floating-point values.

::

    >>> add_integer(4.0, 3.0)
    7

floats are casted to integers before addition is performed.

::

    >>> add_integer(2.5, 0.5)
    2

::

    >>> add_integer(-2.5, -0.5)
    -2

The floating and non-floating point values can be combined.

::

    >>> add_integer(2.5, -4)
    -2

The second argument is has a default, 98, so its optional.

::

    >>> add_integer(5)
    103

Non-Numbers
===========

``add_integer()`` expected argguments are either integers or floats.
If any of the arguments is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("seven", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "python")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(5.7, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is
printed for the first argument only.

::

    >>> add_integer("python", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

If infinity is provided the function will fail.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: failed to convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: failed to convert float infinity to integer

If NaN numbers are provided the function will fail.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: failed to convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: failed to convert float NaN to integer
